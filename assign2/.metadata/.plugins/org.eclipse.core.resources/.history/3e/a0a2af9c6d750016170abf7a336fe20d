#include <queue>
#include <stdlib.h>
#include <stdio.h>
#include <sstream>
#include <string>
#include <iostream>
using namespace std;

typedef struct TreeNode
{
  int value;
  TreeNode *left;
  TreeNode *right;

}TreeNode;

TreeNode* AddInteger(int value, TreeNode* rootNode){
	if(rootNode == 0){
		rootNode = new TreeNode;
		rootNode->value = value;
		return rootNode;
	}
	else{
		TreeNode* currentNode = rootNode;
		while(currentNode != 0){
			if(value < currentNode->value){
				if(currentNode->left == 0){
					currentNode->left = new TreeNode;
					currentNode->left->value = value;
					currentNode = currentNode->left->left;
				}
				else{
					currentNode = 0;
				}
			}
			else if(value > currentNode->value){
				if(currentNode->right == 0){
					currentNode->right = new TreeNode;
					currentNode->right->value = value;
					currentNode = 0;
				}
				else{
					currentNode = currentNode->right;
				}
			}
		}
		//currentNode = new TreeNode;
		//currentNode->value = value;

		return rootNode;
	}
}

void destroy_tree(TreeNode* rootNode)
{
  if( rootNode != 0 )
  {
      destroy_tree(rootNode->left);
      destroy_tree(rootNode->right);
      delete(rootNode);
  }
}

int main(int argc, char* argv[]){
	string countAndSize;
	std::getline(cin,countAndSize);
	stringstream stream(countAndSize);
	int numTreeNodes;
	int numTrees;
	int count = 1;
	int streamHolder;
	while(stream >> streamHolder){
		if (count == 1){
			numTrees = streamHolder;
		}
		else{
			numTreeNodes = streamHolder;
		}
		count ++;
	}
	cout << "count: " << numTrees << " Nodes/Tree " << numTreeNodes << endl;

	//iterate through each line and build tree. add tree to vector
	vector<TreeNode*> Trees;
	for(int i = 0; i < numTrees; i++){
		string nodesList;
		int nodeValueStream;
		getline(cin,nodesList);
		stringstream listStream(nodesList);
		vector<int> resistanceVals;
		TreeNode* rootNode = 0;
		while(listStream >> nodeValueStream){
			resistanceVals.push_back(nodeValueStream);
			rootNode = AddInteger(nodeValueStream, rootNode);
		}
		Trees.push_back(rootNode);
	}
	return 0;
}


