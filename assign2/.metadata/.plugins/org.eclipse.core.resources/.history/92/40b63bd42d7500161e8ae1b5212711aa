#include <queue>
#include <stdlib.h>
#include <stdio.h>
#include <sstream>
#include <string>
#include <iostream>
using namespace std;

typedef struct TreeNode
{
  int value;
  TreeNode *left;
  TreeNode *right;

}TreeNode;

//void InsertInteger(int value, TreeNode* rootNode){
//    if( rootNode == 0 )
//    {
//
////    	*leaf = new TreeNode;
////    	TreeNode* rootNode = leaf;
////
////        (*leaf)->value = key;
////        (*leaf)->left = 0;
////        (*leaf)->right = 0;
//    }
//    //search left
//    else if(value < (*leaf)->key_value)
//    {
////        insert( key, &(*leaf)->left );
//    }
//    //search right
//    else if(value > (*leaf)->key_value)
//    {
////        insert( key, &(*leaf)->right );
//    }
//}
//
//void destroy_tree(struct node *leaf)
//{
//  if( leaf != 0 )
//  {
//      destroy_tree(leaf->left);
//      destroy_tree(leaf->right);
//      delete(leaf);
//      //free( leaf );
//  }
//}

int main(int argc, char* argv[]){
	string countAndSize;
	std::getline(cin,countAndSize);
	stringstream stream(countAndSize);
	int numTreeNodes;
	int numTrees;
	int count = 1;
	int streamHolder;
	while(stream >> streamHolder){
		if (count == 1){
			numTrees = streamHolder;
		}
		else{
			numTreeNodes = streamHolder;
		}
		count ++;
	}
	cout << "count: " << numTrees << " Nodes/Tree " << numTreeNodes << endl;

	//iterate through each line and build tree. add tree to vector
	vector<TreeNode*> Trees;
	for(int i = 0; i < numTrees; i++){
		string nodesList;
		int nodeValueStream
		stringstream listStream(nodeValueStream);

	}
	return 0;
}


