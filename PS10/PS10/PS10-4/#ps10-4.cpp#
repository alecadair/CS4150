/*
 * ps10-4.cpp
 *
 *  Created on: Nov 15, 2016
 *      Author: adair
 */

#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <map>
#include <vector>
#include <cstring>
#include <unordered_map>
#include <string>
#include <algorithm>

class Point3D{
public:
    int r,door,k, result;
};

bool point_equals(Point3D r, Point3D l){
    return (r.door == l.door) && (r.r == l.r) && (r.k == l.k);
}
int hash_point(Point3D p){
    size_t h1 = std::hash<int>()(p.r);
    size_t h2 = std::hash<int>()(p.k);
    size_t h3 = std::hash<int>()(p.door);
    return (h1^(h2<<1))^h3;
}

/*struct Hash{
	size_t operator()(const Point3D& p)const{
		size_t h1 = std::hash<int>()(p.r);
		size_t h2 = std::hash<int>()(p.k);
        size_t h3 = std::hash<int>()(p.door);
		return (h1^(h2<<1))^h3;
		//size_t x = std::hash<int>()(p.x);
	}
    };*/

/*struct Equals{
	bool operator()(const Point3D& l, const Point3D& r)const{
		return(l.door == r.door) &&(r.r == l.r) && (l.k == r.k);
	}
    };*/

typedef struct triple{
	int r, door, k;
}triple;

//typedef std::unordered_map<Point3D,int,Hash,Equals> Point3DMap;

int max_value(int r, int uncloseableRoom, int k, std::vector<std::vector<int> > rooms,std::map<std::string,int>* cache){
    int sub_r = r;
    int room = uncloseableRoom;
    int sub_k = k;
    int result = 0;
    //std::string r_string;
    //td::itoa(r,r_string,10);
    std::string str = "";
    str += "a";
    std::string r_str = std::to_string(sub_r);
    std::string k_str = std::to_string(sub_k);
    std::string room_str = std::to_string(room);
    std::string key = r_str + k_str + room_str;
    //std::string key = std::to_string(r) + std::to_string(uncloseableRoom) + std::to_string(k);
    if(cache->count(key) > 0){
        return cache->at(key);
        //return (*cache)[key];
    }
    if((unsigned)r == rooms.size()){

        return 0;
    }
    Point3D point;
    point.r =r; point.k = k; point.door = uncloseableRoom;
    //  for(int i = 0; i < cache->size(); i++){
    //if(cache.count(hash_point(point)) > 0){
    //    return cache[hash_point(point)];
    //}
    //if(point_equals(cache->at(i),point)){
    //    return cache->at(i).result;
    //}
//    }
    //if(cache.count(point) > 0){
    //    return cache[point];
    // }
  //  triple trip;

// //    trip.r = r;
// //    trip.door = uncloseableRoom;
// //    trip.k = k;
//     int result = 0;
// //    if(cache->count() > 0){
//    	return (*(cache))[r];
//    }
    if(k == ((signed int)rooms.size()) - r){
        switch(uncloseableRoom){
        case -1:{
            int x = rooms[r][0] + max_value(r+1,0,k-1,rooms,cache);
            int y = rooms[r][1] + max_value(r+1,1,k-1,rooms,cache);
            result = std::max(x,y);
            break;
        } case 0:{
            result = rooms.at(r)[0] + max_value(r+1,0,k-1, rooms,cache);
            break;
        } case 1:{
            result = rooms.at(r)[1] + max_value(r+1,1,k-1,rooms, cache);
            break;
        } default:{
            return 0;
            break;
        }
        }
        result -= 1;
        result += 1;
        point.result = result;
        //cache[hash_point(point)] = result;
      //cache->push_back(point);
        // cache[point] = result;
      //  (*(cache))[&triple] = result;
        cache->at(key) = result;
        return result;
    }
    switch(uncloseableRoom){
    case -1 :{
        int x = rooms[r][0] + max_value(r+1,0,k-1,rooms, cache);
        int y = rooms[r][1] + max_value(r+1,1,k-1,rooms, cache);
        int z = rooms[r][1] + rooms[r][0] + max_value(r+1,-1,k,rooms, cache);
        int max = std::max(x,y);
        result = std::max(max,z);
        break;
    }
    case 0 :{
        int x = rooms[r][0] + max_value(r+1, 0,k-1,rooms, cache);
        int y = rooms[r][0] + rooms[r][1] + max_value(r+1,-1,k,rooms, cache);
        result = std::max(x,y);
        break;
    }
    case 1 :{
        int x = rooms[r][1] + max_value(r+1,1,k-1,rooms, cache);
        int y = rooms[r][1] + rooms.at(r)[0] + max_value(r+1,-1,k,rooms, cache);
        result = std::max(x,y);
        break;
    }
    default:{
        return 0;
        break;
    }
    }
    point.result = result;
    //cache->push_back(point);
    //cache[hash_point(point)] = result;
    cache->at(key)= result;
   // (*(cache))[r] = result;
    return result;
}
void max_val(std::vector<std::vector<int> > rooms, int N, int K){
    //std::unordered_map<int,int> cache;
    std::map<std::string,int> cache;
    //Point3DMap cache;
    //std::vector<Point3D> cache;
    int result = max_value(0,-1,K,rooms,&cache);
    std::cout<< result << std::endl;
}

int main(int argc, char** arv){
    while(1){
        int N, K;
        scanf("%d %d",&N,&K);
        if((N == 0)&&(K==0)){
            break;
        }
        std::vector<std::vector <int> > rooms(N);
        for(int i = 0; i < N; i ++){
            int x,y;
            scanf("%d %d", &x,&y);
            rooms.at(i).push_back(x);
            rooms.at(i).push_back(y);
        }
        max_val(rooms,N,K);
    }
    return 0;
}
