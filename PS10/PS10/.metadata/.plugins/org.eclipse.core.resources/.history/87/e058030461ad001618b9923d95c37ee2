/*
 * ps10-4.cpp
 *
 *  Created on: Nov 15, 2016
 *      Author: adair
 */

#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <vector>
#include <algorithm>

int max_value(int r, int uncloseableRoom, int k, std::vector<std::vector<int> > rooms, int * memory){
	if((unsigned)r == rooms.size()){
		return 0;
	}
//	if(memory[r] != 0){
//		return memory[r];
//	}
	if(k == ((signed int)rooms.size()) - r){
		switch(uncloseableRoom){
		case -1:{
			int x = rooms[r][0] + max_value(r+1,0,k-1,rooms,memory);
			int y = rooms[r][1] + max_value(r+1,1,k-1,rooms,memory);
			int result = std::max(x,y);
			memory[r] = result;
			return result;
			//return std::max(x,y);
			break;
		}
		case 0:{

			int result= rooms.at(r)[0] + max_value(r+1,0,k-1, rooms,memory);
			memory[r] = result;
			return result;
			break;
		}
		case 1:{
			int result =rooms.at(r)[1] + max_value(r+1,1,k-1,rooms,memory);
			memory[r] = result;
			break;
		}
		default:{
			return 0;
			break;
		}
		}
	}
	switch(uncloseableRoom){
	case -1 :{
		int x = rooms[r][0] + max_value(r+1,0,k-1,rooms,memory);
		int y = rooms[r][1] + max_value(r+1,1,k-1,rooms,memory);
		int z = rooms[r][1] + rooms[r][0] + max_value(r+1,-1,k,rooms,memory);
		int max = std::max(x,y);
		int result =  std::max(max,z);
		memory[r] = result;
		return result;
		break;
	}
	case 0 :{
		int x = rooms[r][0] + max_value(r+1, 0,k-1,rooms,memory);
		int y = rooms[r][0] + rooms[r][1] + max_value(r+1,-1,k,rooms,memory);
		int result = std::max(x,y);
		memory[r] = result;
		return result;
		break;
	}
	case 1 :{
		int x = rooms[r][1] + max_value(r+1,1,k-1,rooms,memory);
		int y = rooms[r][1] + rooms[r][0] + max_value(r+1,-1,k,rooms,memory);
		int result = std::max(x,y);
		memory[r] = result;
		return result;
		break;
	}
	default:{
		return 0;
		break;
	}
	}
	return 0;
}
void function_call2(std::vector<std::vector<int> > rooms, int N, int K){
	int memory[rooms.size()];
//	for(unsigned int i = 0; i < rooms.size(); i ++){
//		memory[i] = 0;
//	}
	int result = max_value(0,-1,K,rooms,memory);
	std::cout<< result << std::endl;
}

int main(int argc, char** arv){
	while(1){
		int N, K;
		scanf("%d %d",&N,&K);
		if((N == 0)&&(K==0)){
			break;
		}
		std::vector<std::vector <int> > rooms(N);
		//int rooms[N][2];
		for(int i = 0; i < N; i ++){
			int x,y;
			scanf("%d %d", &x,&y);
			rooms.at(i).push_back(x);
			rooms.at(i).push_back(y);
		}
		function_call2(rooms,N,K);
	}
	return 0;
}


