/*
 * ps10-4.cpp
 *
 *  Created on: Nov 15, 2016
 *      Author: adair
 */

#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <map>
#include <vector>
#include <unordered_map>
#include <algorithm>

class Point3D{
public:
	int x,y,z;
};

struct Hash{
	size_t operator()(const Point3D& p)const{
		size_t h1 = std::hash<int>()(p.x);
		size_t h2 = std::hash<int>()(p.y);
		size_t h3 = std::hash<int>()(p.z);

		return (h1^(h2<<1))^h3;
		//size_t x = std::hash<int>()(p.x);
	}
};
struct Equals{
	bool operator()(const Point3D& l, const Point3D& r)const{
		return(l.y == r.y) &&(r.x == l.x) && (l.z == r.z);
	}
};

typedef struct triple{
	int r, door, k;
}triple;

typedef std::unordered_map<Point3D,int,Hash,Equals> Point3DMap;

int max_value(int r, int uncloseableRoom, int k, std::vector<std::vector<int> > rooms,Point3DMap cache){
    if((unsigned)r == rooms.size()){
        return 0;
    }
    triple trip;
    trip.r = r;
    trip.door = uncloseableRoom;
    trip.k = k;
    int result = 0;
//    if(cache->count() > 0){
//    	return (*(cache))[r];
//    }
    if(k == ((signed int)rooms.size()) - r){
        switch(uncloseableRoom){
        case -1:{
            int x = rooms[r][0] + max_value(r+1,0,k-1,rooms,cache);
            int y = rooms[r][1] + max_value(r+1,1,k-1,rooms,cache);
            result = std::max(x,y);
            break;
        } case 0:{
            result = rooms.at(r)[0] + max_value(r+1,0,k-1, rooms,cache);
            break;
        } case 1:{
            result = rooms.at(r)[1] + max_value(r+1,1,k-1,rooms, cache);
            break;
        } default:{
            return 0;
            break;
        }
        }

      //  (*(cache))[&triple] = result;
        return result;
    }
    switch(uncloseableRoom){
    case -1 :{
        int x = rooms[r][0] + max_value(r+1,0,k-1,rooms, cache);
        int y = rooms[r][1] + max_value(r+1,1,k-1,rooms, cache);
        int z = rooms[r][1] + rooms[r][0] + max_value(r+1,-1,k,rooms, cache);
        int max = std::max(x,y);
        result = std::max(max,z);
        break;
    }
    case 0 :{
        int x = rooms[r][0] + max_value(r+1, 0,k-1,rooms, cache);
        int y = rooms[r][0] + rooms[r][1] + max_value(r+1,-1,k,rooms, cache);
        result = std::max(x,y);
        break;
    }
    case 1 :{
        int x = rooms[r][1] + max_value(r+1,1,k-1,rooms, cache);
        int y = rooms[r][1] + rooms.at(r)[0] + max_value(r+1,-1,k,rooms, cache);
        result = std::max(x,y);
        break;
    }
    default:{
        return 0;
        break;
    }
    }
   // (*(cache))[r] = result;
    return result;
}
void max_val(std::vector<std::vector<int> > rooms, int N, int K){
    //std::map<triple*,int> cache;
	Point3DMap cache;
	int result = max_value(0,-1,K,rooms,cache);
    std::cout<< result << std::endl;
}

int main(int argc, char** arv){
    while(1){
        int N, K;
        scanf("%d %d",&N,&K);
        if((N == 0)&&(K==0)){
            break;
        }
        std::vector<std::vector <int> > rooms(N);
        for(int i = 0; i < N; i ++){
            int x,y;
            scanf("%d %d", &x,&y);
            rooms.at(i).push_back(x);
            rooms.at(i).push_back(y);
        }
        max_val(rooms,N,K);
    }
    return 0;
}
